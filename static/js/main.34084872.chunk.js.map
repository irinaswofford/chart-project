{"version":3,"sources":["components/DeviceGraphAndGrid.js","App.js","serviceWorker.js","index.js"],"names":["DeviceGraphAndGrid","props","state","dataSortedByDevice","dateMonthDay","Date","toLocaleString","month","day","year","FetchDataTSV","bind","ProcessRawDataTSV","SortDataByDevice","ConvertToTime24HR","GetRandomColor","InitLineChart","DrawLine","this","dataRawTSV","dataAll","timestamp","setState","deviceId","chart","dataDevice","rawDataTSVFinal","tsv","then","rawDataTSV","length","console","log","map","item","index","deviceid","Number","usage","x","y","dataProcessed","dataByDeviceId","key","forEach","colorCodeHex","push","sort","a","b","key1","key2","time12h","time","replace","modifier","includes","split","hours","minutes","parseInt","dateTimeNow","getFullYear","getUTCMonth","getUTCDay","getTime","color","i","Math","floor","random","allData","vis","d3","MARGINS","mindate","d","maxdate","xRange","domain","range","yRange","xAxis","tickSize","yAxis","append","attr","call","style","text","lineData","colorHex","lineFunc","curve","className","id","width","height","margin","padding","textAlign","minWidth","Object","keys","deviceData","backgroundColor","sm","md","totalUsage","device","deviceDataNew","slice","maxUsage","maxUsageTime","maxUsageTimeFormat","hour","minute","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.34084872.chunk.js","sourcesContent":["import React from \"react\";\r\nimport * as d3 from 'd3';\r\nimport { tsv } from 'd3-fetch';\r\nimport './DynamicGrid.css';\r\nimport { Col, Row } from 'react-flexbox-grid';\r\n\r\n\r\nclass DeviceGraphAndGrid extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dataSortedByDevice: {},\r\n      dateMonthDay: new Date().toLocaleString('default', {\r\n        month: 'long',\r\n        day: \"2-digit\",\r\n        year: \"numeric\"\r\n      })\r\n    }\r\n\r\n\r\n    this.FetchDataTSV = this.FetchDataTSV.bind(this);\r\n    this.ProcessRawDataTSV = this.ProcessRawDataTSV.bind(this);\r\n    this.SortDataByDevice = this.SortDataByDevice.bind(this);\r\n    this.ConvertToTime24HR = this.ConvertToTime24HR.bind(this);\r\n    this.GetRandomColor = this.GetRandomColor.bind(this);\r\n    this.InitLineChart = this.InitLineChart.bind(this);\r\n    this.DrawLine = this.DrawLine.bind(this);\r\n\r\n  }\r\n\r\n\r\n\r\n  async componentDidMount() {\r\n\r\n    // Fetch Data TSV\r\n    let dataRawTSV = await this.FetchDataTSV();\r\n\r\n    // Process Raw Data (convert String to Date, Number)\r\n    let dataAll = this.ProcessRawDataTSV(dataRawTSV) || [{ timestamp: new Date() }];\r\n    let dateMonthDay = (new Date(dataAll[0][\"timestamp\"]) || new Date()).toLocaleString('default', {\r\n      month: 'long',\r\n      day: \"2-digit\",\r\n      year: \"numeric\"\r\n    });\r\n\r\n\r\n    // Sort Data By Device\r\n    let dataSortedByDevice = this.SortDataByDevice(dataAll);\r\n    // console.log(\"dataDevices: \", dataDevices);\r\n\r\n    // set state\r\n    await this.setState({\r\n      dataSortedByDevice: dataSortedByDevice || {},\r\n      dateMonthDay: dateMonthDay\r\n    });\r\n\r\n    // Init Line Chart\r\n    let chart = this.InitLineChart(dataAll);\r\n\r\n    // Draw lines on chart\r\n    for (var deviceId in dataSortedByDevice) {\r\n      // un-pack\r\n      let dataDevice = dataSortedByDevice[deviceId];\r\n     // console.log(deviceId, dataDevice, \"\\n\\n\");\r\n\r\n      // Draw line on chart\r\n      this.DrawLine(dataDevice, chart);\r\n    }\r\n\r\n  } // end componentDidMount\r\n\r\n\r\n  // #region api calls\r\n  async FetchDataTSV() {\r\n    const url = 'https://raw.githubusercontent.com/hologram-io/carthage/master/usage.tsv';\r\n\r\n    let rawDataTSVFinal = [];\r\n    await tsv(url).then(rawDataTSV => {\r\n\r\n      /*    console.log(data); */\r\n      if (rawDataTSV === null || rawDataTSV.length === 0) {\r\n        console.log(\"problem fetching data, data was empty\");\r\n      }\r\n\r\n      rawDataTSVFinal = rawDataTSV;\r\n    });\r\n\r\n    return rawDataTSVFinal || [];\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region data process\r\n  ProcessRawDataTSV(rawDataTSV) {\r\n\r\n    // process data- cast as Number, ConvertToTime24HR\r\n    var dataProcessed = rawDataTSV.map((item, index) => {\r\n      item.deviceid = Number(item.deviceid);\r\n      item.usage = Number(item.usage);\r\n      item.x = Number(item.x);\r\n      item.y = Number(item.y);\r\n      item.timestamp = this.ConvertToTime24HR(item.timestamp);\r\n\r\n      return item;\r\n    });\r\n    return dataProcessed;\r\n  }\r\n\r\n\r\n  SortDataByDevice(dataProcessed) {\r\n\r\n    // sort by deviceId\r\n    // builds object literal like this: { deviceId: [{},{},{},{}]}\r\n    let dataByDeviceId = {};\r\n    dataProcessed.forEach((item, index) => {\r\n      let deviceId = item[\"deviceid\"];\r\n      let colorCodeHex = \"\";\r\n\r\n      if (!(deviceId in dataByDeviceId)) {\r\n        dataByDeviceId[deviceId] = [];\r\n        colorCodeHex = this.GetRandomColor();\r\n      }\r\n      item[\"colorCodeHex\"] = colorCodeHex; // init color code for device\r\n      dataByDeviceId[deviceId].push(item);\r\n    });\r\n\r\n    // remove outlier\r\n    delete dataByDeviceId[\"5537\"];\r\n\r\n    // for each device, sort by datetime ascending\r\n    for (var key in dataByDeviceId) {\r\n\r\n      // sort by datetime ascending\r\n      dataByDeviceId[key].sort((a, b) => {\r\n        var key1 = Date(a.timestamp);\r\n        var key2 = Date(b.timestamp);\r\n\r\n        if (key1 < key2) {\r\n          return -1;\r\n        } else if (key1 === key2) {\r\n          return 0;\r\n        } else {\r\n          return 1;\r\n        }\r\n      });\r\n\r\n    }\r\n\r\n    return dataByDeviceId;\r\n  }\r\n  // #endregion\r\n\r\n\r\n  // #region helper methods\r\n  ConvertToTime24HR(time12h) {\r\n    const time = time12h.replace(\"AM\", \"\").replace(\"PM\", \"\");\r\n    const modifier = time12h.includes(\"AM\") ? \"AM\" : time12h.includes(\"PM\") ? \"PM\" : \"\";\r\n\r\n    let [hours, minutes] = time.split(':');\r\n\r\n    if (hours === '12') {\r\n      hours = '00';\r\n    }\r\n\r\n    if (modifier === 'PM') {\r\n      hours = parseInt(hours, 10) + 12;\r\n    }\r\n\r\n    var dateTimeNow = new Date();\r\n    var year = dateTimeNow.getFullYear();\r\n    var month = dateTimeNow.getUTCMonth();\r\n    var day = dateTimeNow.getUTCDay();\r\n\r\n\r\n    var fullDate = new Date(year, month, day, hours, minutes);\r\n    var timeOnly = fullDate.getTime();\r\n\r\n    return timeOnly;\r\n  }\r\n\r\n  GetRandomColor() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n\r\n\r\n  // #endregion\r\n\r\n\r\n  // #region chart\r\n  InitLineChart(allData) {\r\n\r\n    var vis = d3.select('#svgLineChart'),\r\n      WIDTH = 1200,\r\n      HEIGHT = 660,\r\n      MARGINS = {\r\n        top: 50,\r\n        right: 50,\r\n        bottom: 50,\r\n        left: 100\r\n      },\r\n\r\n      mindate = d3.min(allData, function (d) {\r\n        return d.timestamp;\r\n      }),\r\n      maxdate = d3.max(allData, function (d) {\r\n        return d.timestamp;\r\n      }),\r\n\r\n      xRange = d3.scaleTime()\r\n        .domain([mindate, maxdate])\r\n        .range([MARGINS.left, WIDTH - MARGINS.right]),\r\n\r\n      yRange = d3.scaleLinear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([d3.min(allData, function (d) {\r\n        return d.usage < 200 ? d.usage : 0;\r\n      }), d3.max(allData, function (d) {\r\n        return d.usage < 200 ? d.usage : 0;\r\n      })]),\r\n\r\n      xAxis = d3.axisBottom(xRange)\r\n        .tickSize(5),\r\n      yAxis = d3.axisLeft(yRange)\r\n        .tickSize(5);\r\n\r\n    // append x-axis\r\n    vis.append('svg:g')\r\n      .attr('class', 'x axis')\r\n      .attr('transform', 'translate(0,' + (HEIGHT - MARGINS.bottom) + ')')\r\n      .call(xAxis);\r\n\r\n    // append y-axis\r\n    vis.append('svg:g')\r\n      .attr('class', 'y axis')\r\n      .attr('transform', 'translate(' + (MARGINS.left) + ',0)')\r\n      .call(yAxis);\r\n\r\n    // text label for the x axis\r\n    vis.append(\"text\")\r\n      .attr(\"transform\",\r\n      \"translate(\" + (WIDTH / 2) + \" ,\" +\r\n      HEIGHT + \")\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .style(\"font-size\", \"18px\")\r\n      .text(\"Date & Time\");\r\n\r\n    // text label for the y axis\r\n    vis.append(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"y\", 0 - MARGINS.left)\r\n      .attr(\"x\", 0 - (HEIGHT / 2))\r\n      .attr(\"dy\", \"9em\")\r\n      .style(\"text-anchor\", \"middle\")\r\n      .style(\"font-weight\", \"bold\")\r\n      .style(\"font-size\", \"18px\")\r\n      .text(\"Device Usage\");\r\n\r\n    let chart = {\r\n      vis: vis,\r\n      xRange: xRange,\r\n      yRange: yRange\r\n    };\r\n\r\n    return chart;\r\n  }\r\n\r\n\r\n\r\n\r\n  DrawLine(lineData, chart) {\r\n    // un-pack\r\n    let vis = chart[\"vis\"];\r\n    let xRange = chart[\"xRange\"];\r\n    let yRange = chart[\"yRange\"];\r\n    let colorHex = lineData !== null && lineData.length > 0 ? lineData[0][\"colorCodeHex\"] : \"\";\r\n\r\n\r\n    var lineFunc = d3.line()\r\n      .x(function (d) {\r\n        return xRange(d.timestamp);\r\n      })\r\n      .y(function (d) {\r\n        return yRange(d.usage);\r\n      })\r\n      .curve(d3.curveLinear);\r\n\r\n    vis.append('svg:path')\r\n      .attr('d', lineFunc(lineData))\r\n      .attr('stroke', colorHex)\r\n      .attr('stroke-width', 6)\r\n      .attr('fill', 'none');\r\n  }\r\n\r\n  // #endregion\r\n\r\n\r\n  render() {\r\n\r\n    const columnWidth = 3;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"divGraphHolder\">\r\n          <div className=\"headerChartGrid\">Device Usage for {this.state.dateMonthDay}</div>\r\n          <svg id=\"svgLineChart\" width=\"1200\" height=\"700\" style={{ color: '#000000', margin: \"0px auto\" }}></svg>\r\n          <div style={{ margin: \"0px auto 0px auto\", padding: \"5px\", textAlign: \"center\", minWidth: \"60%\" }}>\r\n            <div className=\"subheaderChart\">Legend</div>\r\n            <div className=\"flexContainer_legend\">\r\n              {Object.keys(this.state.dataSortedByDevice).map((deviceId, index) => {\r\n                let deviceData = this.state.dataSortedByDevice[deviceId];\r\n                // validation\r\n                if (deviceData === null || deviceData.length === 0 || deviceData.length === 1) {\r\n                  return true; // continue\r\n                }\r\n                // un-pack\r\n                let colorCodeHex = deviceData[0][\"colorCodeHex\"];\r\n                return (     \r\n                  <div className=\"flexItem_legend\" key={index}>\r\n                    <div className=\"divColorCodeSquare\" style={{ backgroundColor: colorCodeHex }}></div>\r\n                    <div>DeviceId: {deviceId}</div>\r\n                  </div>\r\n                )\r\n              })}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n        <div className=\"divGridHolder\">\r\n          <div className=\"headerChartGrid\">Device Usage Grid for {this.state.dateMonthDay}</div>\r\n          <Row className=\"grid-row rowGrid\" >\r\n            <Col className=\"grid columnGridHeader\" sm={columnWidth} md={columnWidth}>\r\n              Device ID\r\n              </Col>\r\n            <Col className=\"grid columnGridHeader\" sm={columnWidth} md={columnWidth}>\r\n              Peak Usage\r\n            </Col>\r\n\r\n            <Col className=\"grid columnGridHeader\" sm={columnWidth} md={columnWidth}>\r\n              Total Usage\r\n            </Col>\r\n\r\n            <Col className=\"grid columnGridHeader\" sm={columnWidth} md={columnWidth}>\r\n              Color Code\r\n              </Col>\r\n          </Row>\r\n          {Object.keys(this.state.dataSortedByDevice).map((deviceId, index) => {\r\n            let deviceData = this.state.dataSortedByDevice[deviceId];\r\n            // validation\r\n            if (deviceData === null || deviceData.length === 0 || deviceData.length === 1) {\r\n              return true; // continue\r\n            }\r\n\r\n            // un-pack\r\n            let colorCodeHex = deviceData[0][\"colorCodeHex\"];\r\n            let totalUsage = 0;\r\n            deviceData.forEach((device, index) => {\r\n              totalUsage += device[\"usage\"];\r\n            });\r\n\r\n            // clone array\r\n            var deviceDataNew = deviceData.slice();\r\n            // sort by usage\r\n            deviceDataNew.sort((a, b) => {\r\n              return b.usage - a.usage;\r\n            });\r\n            let maxUsage = deviceDataNew[0][\"usage\"];\r\n            let maxUsageTime = deviceDataNew[0][\"timestamp\"];\r\n            let maxUsageTimeFormat = new Date(maxUsageTime).toLocaleString('default', {\r\n              hour: '2-digit',\r\n              minute: \"2-digit\"\r\n            })\r\n            return (\r\n              <Row className=\"grid-row rowGrid\" key={index}>\r\n                <Col className=\"grid columnGrid\" sm={columnWidth} md={columnWidth}>\r\n                  {deviceId}\r\n                </Col>\r\n                <Col className=\"grid columnGrid\" sm={columnWidth} md={columnWidth}>\r\n                  {maxUsage} at {maxUsageTimeFormat}\r\n                </Col>\r\n                <Col className=\"grid columnGrid\" sm={columnWidth} md={columnWidth}>\r\n                  {totalUsage}\r\n                </Col>\r\n                <Col className=\"grid columnGrid\" sm={columnWidth} md={columnWidth}>\r\n\r\n                  <div className=\"divColorCodeSquare\" style={{ backgroundColor: colorCodeHex }}></div>\r\n\r\n                </Col>\r\n              </Row>\r\n            )\r\n          })}\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DeviceGraphAndGrid;","import React from 'react';\nimport DeviceGraphAndGrid from './components/DeviceGraphAndGrid';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DeviceGraphAndGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n"],"sourceRoot":""}